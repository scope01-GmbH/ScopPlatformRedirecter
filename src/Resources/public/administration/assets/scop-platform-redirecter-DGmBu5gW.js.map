{"version":3,"mappings":"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","names":["template$2","Mixin","Criteria","cloneDeep","inAppPurchaseId","template","active","redirectCriteria","criteria","redirect","records","client","headers","response","error","result","promise","template$1","Component","entity","exception","activityGrid","filter","file","profileId","profile","singleError","log","deDE","enGB","Application","searchTypeService","__vitePreload","supportedEntities"],"ignoreList":[],"sources":["../../../app/administration/src/module/scop_platform_redirect/page/scop-platform-redirect-list/scop-platform-redirect-list.html.twig","../../../app/administration/src/module/scop_platform_redirect/page/scop-platform-redirect-list/index.js","../../../app/administration/src/module/scop_platform_redirect/page/scop-platform-redirect-details/scop-platform-redirect-details.html.twig","../../../app/administration/src/module/scop_platform_redirect/page/scop-platform-redirect-details/index.js","../../../app/administration/src/module/scop_platform_redirect/page/scop-platform-redirect-create/index.js","../../../app/administration/src/module/scop_platform_redirect/page/scop-platform-redirect-import-export-modal/scop-platform-redirect-import-export-modal.html.twig","../../../app/administration/src/module/scop_platform_redirect/page/scop-platform-redirect-import-export-modal/index.js","../../../app/administration/src/module/scop_platform_redirect/page/scop-platform-redirect-import-export-activity/index.js","../../../app/administration/src/module/scop_platform_redirect/index.js","../../../app/administration/src/module/sw-import-export/component/sw-import-export-edit-profile-general/index.js"],"sourcesContent":["{% block scop_platform_redirect_list %}\n\n    <sw-page class=\"scop-platform-redirect-list\">\n        <template #search-bar>\n            <sw-search-bar\n                    initial-search-type=\"scop_platform_redirecter_redirect\"\n                    :initial-search=\"term\"\n                    @search=\"onSearch\"\n            />\n        </template>\n\n        <template #smart-bar-actions>\n            {% block scop_platform_redirect_list_smarbar %}\n                <mt-button variant=\"primary\" @click=\"$router.push({name: 'scop.platform.redirect.create'})\">\n                    {{ $t('scopplatformredirecter.list.createButton') }}\n                </mt-button>\n                <mt-button variant=\"secondary\" @click=\"onClickExport\" :isLoading=\"exportLoading\" :disabled=\"noRedirect\">\n                    {{ $t('scopplatformredirecter.list.exportAllButton') }}\n                </mt-button>\n                <mt-button variant=\"secondary\" @click=\"onClickImport\">\n                    {{ $t('scopplatformredirecter.list.importButton') }}\n                </mt-button>\n                <mt-button v-if=\"inAppActive\" variant=\"secondary\" @click=\"onClickCheckLinks\">\n                    {{ $t('scopplatformredirecter.list.check404') }}\n                </mt-button>\n                <mt-button class=\"mt-external-link\" variant=\"action\" :link=\"$tc('scopplatformredirecter.list.faqButton.link')\">\n                    {{ $t('scopplatformredirecter.list.faqButton.text') }} <sw-icon name=\"regular-external-link\" small=\"true\"/>\n                </mt-button>\n            {% endblock %}\n        </template>\n        <template #content>\n            {% block scop_platform_redirect_list_content %}\n                <sw-entity-listing\n                        v-if=\"entitySearchable\"\n                        ref=\"listing\"\n                        :items=\"redirect\"\n                        :repository=\"redirectRepository\"\n                        :columns=\"columns\"\n                        detailRoute=\"scop.platform.redirect.details\"\n                        :is-loading=\"isLoading\"\n                        identifier=\"scop-platform-redirect-list\"\n                        @page-change=\"onPageChange\"\n                        @update-records=\"updateTotal\"\n                        @inline-edit-save=\"onInlineEditSave\"\n                >\n                    <template #column-queryParamsHandling=\"{ item }\">\n                        {{ $tc('scopplatformredirecter.list.queryParamsHandlingValues.' + item.queryParamsHandling) }}\n                    </template>\n                    <template #column-salesChannel=\"{ item }\">\n                        {{ item.salesChannel ? item.salesChannel.translated.name : $tc('scopplatformredirecter.list.allSalesChannels') }}\n                    </template>\n                </sw-entity-listing>\n            {% endblock %}\n            {% block scop_platform_redirect_list_view_import_modal %}\n                <scop-platform-redirect-import-export-modal\n                        :show=\"showImportExportModal\"\n                        :type=\"modalType\"\n                        @close=\"closeImportExport\"\n                        @updateList=\"updateList\"\n                >\n                </scop-platform-redirect-import-export-modal>\n            {% endblock %}\n        </template>\n    </sw-page>\n{% endblock %}\n","import template from './scop-platform-redirect-list.html.twig';\n\nconst {Mixin} = Shopware;\nconst {Criteria} = Shopware.Data;\nconst {cloneDeep} = Shopware.Utils.object;\nvar inAppPurchaseId = 'my-iap-identifier';\n\nShopware.Component.register('scop-platform-redirect-list', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'syncService',\n        'loginService',\n        'importExport',\n        'numberRangeService',\n        'acl',\n        'filterFactory',\n    ],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('listing'),\n        Mixin.getByName('placeholder'),\n    ],\n\n    data() {\n        return {\n            repository: null,\n            redirect: null,\n            exportLoading: false,\n            isLoading: false,\n            noRedirect: true,\n            showImportExportModal: false,\n            modalType: 'export',\n            page: 1,\n            limit: 25,\n            searchConfigEntity: 'scop_platform_redirecter_redirect',\n            entitySearchable: true,\n            total: 0,\n            term: ''\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle()\n        };\n    },\n\n    computed: {\n        inAppActive() {\n            let active = true;\n            if (!Shopware.InAppPurchase.isActive('ScopPlatformRedirecter', inAppPurchaseId)) {\n               // active = false;\n            }\n            return active;\n        },\n        redirectRepository() {\n            return this.repositoryFactory.create('scop_platform_redirecter_redirect');\n        },\n        redirectCriteria() {\n            const redirectCriteria = new Criteria(this.page, this.limit);\n            if (Shopware.InAppPurchase.isActive('ScopPlatformRedirecter', inAppPurchaseId)) {\n                redirectCriteria.setTerm(this.term);\n            }\n\n            return redirectCriteria;\n        },\n        columns() {\n            return [{\n                property: 'sourceURL',\n                dataIndex: 'sourceURL',\n                label: this.$tc('scopplatformredirecter.list.columnSourceUrl'),\n                routerLink: 'scop.platform.redirect.details',\n                inlineEdit: 'string',\n                allowResize: true,\n                primary: true\n            }, {\n                property: 'targetURL',\n                dataIndex: 'targetURL',\n                label: this.$tc('scopplatformredirecter.list.columnTargetUrl'),\n                inlineEdit: 'string',\n                allowResize: true\n            }, {\n                property: 'httpCode',\n                dataIndex: 'httpCode',\n                label: this.$tc('scopplatformredirecter.list.columnHttpCode'),\n                allowResize: true\n            }, {\n                property: 'enabled',\n                dataIndex: 'enabled',\n                label: this.$tc('scopplatformredirecter.list.columnEnabled'),\n                inlineEdit: 'boolean'\n            }, {\n                property: 'queryParamsHandling',\n                dataIndex: 'queryParamsHandling',\n                label: this.$tc('scopplatformredirecter.list.columnQueryParamsHandling'),\n                allowResize: true\n            }, {\n                property: 'salesChannel',\n                dataIndex: 'salesChannel',\n                label: this.$tc('scopplatformredirecter.list.salesChannel'),\n                allowResize: true\n            },\n            ];\n        }\n    },\n\n    watch: {\n        redirectCriteria: {\n            handler() {\n                this.getList();\n            },\n            deep: true,\n        },\n    },\n\n    methods: {\n        updateCriteria(criteria) {\n            this.page = 1;\n        },\n        async getList() {\n            this.isLoading = true;\n\n            try {\n                let criteria = await this.addQueryScores(this.term, this.redirectCriteria);\n                // disable search if in app purchase is inactive\n                if (!Shopware.InAppPurchase.isActive('ScopPlatformRedirecter', inAppPurchaseId)) {\n                    criteria = await this.addQueryScores('', this.redirectCriteria);\n                }\n                const result = await Promise.all([\n                    this.redirectRepository.search(criteria),\n                ]);\n\n                const redirect = result[0];\n\n                this.total = redirect.total;\n                this.redirect = redirect;\n\n                this.isLoading = false;\n\n                this.selection = {};\n            } catch {\n                this.isLoading = false;\n            }\n        },\n        onClickExport() {\n            this.modalType = 'export';\n            this.showImportExportModal = true;\n        },\n        updateTotal(records) {\n            this.noRedirect = records.length === 0;\n        },\n        onClickImport() {\n            this.modalType = 'import';\n            this.showImportExportModal = true;\n        },\n        onClickCheckLinks() {\n            const client = Shopware.Application.getContainer('init').httpClient;\n            const headers = {\n                headers: {\n                    Authorization: `Bearer ${Shopware.Service('loginService').getToken()}`,\n                },\n            };\n            console.log(headers)\n            client\n                .post(\n                    `/_admin/scop-check-redirects`,\n                    {},\n                    {\n                        headers\n                    },\n                )\n                .then((response) => {\n                    console.log(response)\n                })\n                .catch((error) => {\n                    if (error instanceof CanceledError) {\n                        return {};\n                    }\n                    throw error;\n                });\n        },\n        closeImportExport() {\n            this.showImportExportModal = false;\n        },\n        updateList() {\n            const criteria = this.redirect.criteria;\n\n            this.repository.search(criteria, Shopware.Context.api).then((result) => {\n                this.redirect = result;\n            });\n        },\n        onInlineEditSave(promise, redirect) {\n            if (redirect.sourceURL.trim() === redirect.targetURL.trim() && redirect.enabled) {\n                this.createNotificationError({\n                    title: this.$tc('scopplatformredirecter.general.errorTitle'),\n                    message: this.$tc('scopplatformredirecter.detail.errorSameUrlDescription')\n                });\n\n                redirect.enabled = false;\n                redirect._origin.enabled = true;\n\n                promise.then(() => {\n                    this.repository.save(redirect, Shopware.Context.api).then(() => {\n                        return this.updateList();\n                    });\n                });\n                return;\n            }\n\n            if (!redirect.sourceURL) {\n                this.createNotificationError({\n                    title: this.$tc('scopplatformredirecter.general.errorTitle'),\n                    message: this.$tc('scopplatformredirecter.detail.errorEmptySourceURL')\n                });\n                this.updateList();\n                return;\n            }\n            if (!redirect.targetURL) {\n                this.createNotificationError({\n                    title: this.$tc('scopplatformredirecter.general.errorTitle'),\n                    message: this.$tc('scopplatformredirecter.detail.errorEmptyTargetURL')\n                });\n                this.updateList();\n                return;\n            }\n\n            return promise\n                .catch(() => {\n                    this.updateList();\n                    this.createNotificationError({\n                        message: this.$tc('global.notification.notificationSaveErrorMessageRequiredFieldsInvalid'),\n                    });\n                });\n        }\n    },\n\n});\n","{% block scop_platform_redirect_details %}\n    <sw-page class=\"scop-platform-redirect-details\">\n        <template #smart-bar-actions>\n            <sw-button size=\"default\"\n                       variant=\"secondary\" :routerLink=\"{name: 'scop.platform.redirect.list'}\">\n                {{ $t('scopplatformredirecter.detail.cancelButton') }}</sw-button>\n            <sw-button-process :isLoading=\"isLoading\"\n                               :processSuccess=\"processSuccess\" variant=\"primary\"\n                               @update:processSuccess=\"saveFinish\" @click=\"onClickSave\">\n                {{ $t('scopplatformredirecter.detail.saveButton') }}</sw-button-process>\n        </template>\n        <template #content>\n            <sw-card-view>\n                <sw-card v-if=\"redirect\" :isLoading=\"isLoading\">\n                    <sw-text-field :label=\"$t('scopplatformredirecter.detail.sourceUrlLabel')\" v-model:value=\"redirect.sourceURL\"\n                              validation=\"required\"></sw-text-field>\n                    <sw-text-field :label=\"$t('scopplatformredirecter.detail.targetUrlLabel')\" v-model:value=\"redirect.targetURL\"\n                              validation=\"required\"></sw-text-field>\n                    <sw-select-number-field :label=\"$t('scopplatformredirecter.detail.httpCodeLabel')\"\n                                            v-model:value=\"redirect.httpCode\" validation=\"required\" @update:value=\"transformHttpCodeValueToNumber\">\n                        <option value=301>{{ $t('scopplatformredirecter.detail.httpCodeLabelValues.301') }}</option>\n                        <option value=302>{{ $t('scopplatformredirecter.detail.httpCodeLabelValues.302') }}</option>\n                    </sw-select-number-field>\n                    <sw-switch-field :label=\"$tc('scopplatformredirecter.detail.enabledLabel')\"\n                                     v-model:value=\"redirect.enabled\" validation=\"required\"></sw-switch-field >\n                    <sw-select-number-field :label=\"$t('scopplatformredirecter.detail.queryParamsHandling')\"\n                                            v-model:value=\"redirect.queryParamsHandling\" validation=\"required\" @update:value=\"transformQueryFieldValueToNumber\">\n                        <option value=0>{{ $t('scopplatformredirecter.detail.queryParamsHandlingValues.consider') }}</option>\n                        <option value=1>{{ $t('scopplatformredirecter.detail.queryParamsHandlingValues.ignore') }}</option>\n                        <option value=2>{{ $t('scopplatformredirecter.detail.queryParamsHandlingValues.transfer') }}</option>\n                    </sw-select-number-field>\n\n                    <sw-entity-single-select v-model:value=\"redirect.salesChannelId\" entity=\"sales_channel\" :resetOption=\"$t('scopplatformredirecter.detail.salesChannel.all')\" :label=\"$t('scopplatformredirecter.detail.salesChannel.select')\"></sw-entity-single-select>\n                </sw-card>\n            </sw-card-view>\n        </template>\n    </sw-page>\n{% endblock %}\n","import template from './scop-platform-redirect-details.html.twig';\n\nconst {Component, Mixin} = Shopware;\n\nComponent.register('scop-platform-redirect-details', {\n    template,\n\n    inject: [\n        'repositoryFactory'\n    ],\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n\n    metaInfo() {\n        return {\n            title: this.$createTitle()\n        };\n    },\n\n    data() {\n        return {\n            redirect: null,\n            isLoading: false,\n            processSuccess: false,\n            repository: null\n        };\n    },\n\n    created() {\n        this.repository = this.repositoryFactory.create('scop_platform_redirecter_redirect');\n        this.getRedirect();\n    },\n\n    methods: {\n        getRedirect() {\n            this.repository.get(this.$route.params.id, Shopware.Context.api).then((entity) => {\n                this.redirect = entity;\n            })\n        },\n\n        onClickSave() {\n            //Checking if source and target URL are the same or one of them is empty, otherwise proceed\n            if (this.redirect.sourceURL.trim() === this.redirect.targetURL.trim()) {\n                this.createNotificationError({\n                    title: this.$tc('scopplatformredirecter.general.errorTitle'),\n                    message: this.$tc('scopplatformredirecter.detail.errorSameUrlDescription')\n                })\n                return;\n            }\n            if (!this.redirect.sourceURL) {\n                this.createNotificationError({\n                    title: this.$tc('scopplatformredirecter.general.errorTitle'),\n                    message: this.$tc('scopplatformredirecter.detail.errorEmptySourceURL')\n                })\n                return;\n            }\n            if (!this.redirect.targetURL) {\n                this.createNotificationError({\n                    title: this.$tc('scopplatformredirecter.general.errorTitle'),\n                    message: this.$tc('scopplatformredirecter.detail.errorEmptyTargetURL')\n                })\n                return;\n            }\n            this.isLoading = true;\n            this.repository.save(this.redirect, Shopware.Context.api).then(() => { //Updating the Redirect in the Database\n                this.getRedirect();\n                this.isLoading = false;\n                this.processSuccess = true;\n            }).catch((exception) => {\n                this.isLoading = false;\n                this.createNotificationError({\n                    title: this.$tc('scopplatformredirecter.general.errorTitle'),\n                    message: exception\n                })\n            });\n        },\n\n        saveFinish() {\n            this.processSuccess = false;\n            this.$router.push({name: 'scop.platform.redirect.list'});\n        },\n\n        transformQueryFieldValueToNumber() {\n          this.redirect.queryParamsHandling = Number(this.redirect.queryParamsHandling);\n        },\n\n        transformHttpCodeValueToNumber() {\n            this.redirect.httpCode = Number(this.redirect.httpCode);\n        },\n    }\n\n});\n\nfunction hasExternalLink() {\n    var version = Shopware.Context.app.config.version.split(\".\");\n    if (parseInt(version[0]) < 6)\n        return false;\n    if (parseInt(version[0]) > 6)\n        return true;\n\n    if (parseInt(version[1]) < 4)\n        return false;\n    if (parseInt(version[1]) > 4)\n        return true;\n\n    if (parseInt(version[2]) < 3)\n        return false;\n    return true;\n}\n","const {Component} = Shopware;\n\nShopware.Component.extend('scop-platform-redirect-create', 'scop-platform-redirect-details', {\n\n    methods: {\n        getRedirect() {\n            this.redirect = this.repository.create(Shopware.Context.api);\n            this.redirect.httpCode = 302; //Default Value für httpCode\n            this.redirect.enabled = true; //Default Value für enabled\n        },\n\n        onClickSave() {\n            //Checking if source and target URL are the same or one of them is empty, otherwise proceed\n            if (this.redirect.sourceURL === this.redirect.targetURL) {\n                this.createNotificationError({\n                    title: this.$tc('scopplatformredirecter.general.errorTitle'),\n                    message: this.$tc('scopplatformredirecter.detail.errorSameUrlDescription')\n                })\n                return;\n            }\n            if (!this.redirect.sourceURL) {\n                this.createNotificationError({\n                    title: this.$tc('scopplatformredirecter.general.errorTitle'),\n                    message: this.$tc('scopplatformredirecter.detail.errorEmptySourceURL')\n                })\n                return;\n            }\n            if (!this.redirect.targetURL) {\n                this.createNotificationError({\n                    title: this.$tc('scopplatformredirecter.general.errorTitle'),\n                    message: this.$tc('scopplatformredirecter.detail.errorEmptyTargetURL')\n                })\n                return;\n            }\n            this.isLoading = true;\n            this.repository.save(this.redirect, Shopware.Context.api).then(() => { //Creating the new Redirect\n                this.isLoading = false;\n                this.processSuccess = true;\n            }).catch((exception) => {\n                this.isLoading = false;\n                this.createNotificationError({\n                    title: this.$tc('scopplatformredirecter.general.errorTitle'),\n                    message: exception\n                })\n            });\n        },\n    }\n\n});\n","{% block scop_platform_redirect_import_modal %}\n    <div class=\"scop-platform-redirect-import-export-modal\">\n        <sw-modal\n                v-if=\"show\"\n                class=\"scop-platform-redirect-import-export-modal\"\n                :title=\"$tc('scopplatformredirecter.list.' + type + 'Modal.title')\"\n                variant=\"large\"\n                @modal-close=\"onClose\"\n        >\n            {% block scop_platform_redirect_import_modal_content %}\n\n                <sw-card :hero=\"true\" :isLoading=\"processing\" v-if=\"type === 'import'\">\n                    <sw-file-input\n                            v-model:value=\"selectedFile\"\n                            :maxFileSize=\"8*1024*1024\"\n                            @update:value=\"onFileChange\">\n                    </sw-file-input>\n                </sw-card>\n            {% endblock %}\n            {% block scop_platform_redirect_import_modal_options %}\n                <sw-entity-single-select\n                        :label=\"$tc('sw-import-export.importer.profileLabel')\"\n                        :criteria=\"profileCriteria\"\n                        entity=\"import_export_profile\"\n                        label-property=\"label\"\n                        :value=\"selectedProfileId\"\n                        required\n                        show-clearable-button\n                        @update:value=\"onProfileSelect\"></sw-entity-single-select>\n                <div class=\"scop-platform-redirect-import-export-modal-activity\">\n                    <scop-platform-redirect-import-export-activity\n                            ref=\"activityGrid\"\n                            :type=\"type\"></scop-platform-redirect-import-export-activity>\n                </div>\n            {% endblock %}\n            {% block scop_platform_redirect_import_modal_footer %}\n                <template #modal-footer>\n                    <mt-button variant=\"secondary\" @click=\"onClose\" :disabled=\"processing\">\n                        {{ $t('scopplatformredirecter.list.' + type + 'Modal.cancel') }}\n                    </mt-button>\n                    <mt-button variant=\"primary\" :disabled=\"noFile && type !== 'export'\" :isLoading=\"processing\" @click=\"startProcess\">\n                        {{ $t('scopplatformredirecter.list.' + type + 'Modal.start') }}\n                    </mt-button>\n                </template>\n            {% endblock %}\n        </sw-modal>\n    </div>\n{% endblock %}\n","import template from './scop-platform-redirect-import-export-modal.html.twig';\nimport './scop-platform-redirect-import-export-modal.scss';\n\nconst {Component, Mixin} = Shopware;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.register('scop-platform-redirect-import-export-modal', {\n    template,\n\n    inject: [\n        'importExport', 'repositoryFactory'\n    ],\n\n    compatConfig: Shopware.compatConfig,\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    data() {\n        return {\n            selectedFile: null,\n            noFile: true,\n            processing: false,\n            selectedProfileId: null,\n        };\n    },\n\n    props: {\n        show: {\n            type: Boolean,\n            required: true,\n            default: false,\n        },\n        type: {\n            type: String,\n            required: true,\n            default: 'import',\n        }\n    },\n\n    emits: ['import-started', 'export-started'],\n\n    metaInfo() {\n        return {\n            title: this.$createTitle()\n        };\n    },\n\n    computed: {\n        importExportProfileRepository() {\n            return this.repositoryFactory.create('import_export_profile');\n        },\n        profileCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addSorting(Criteria.sort('label'));\n\n            criteria.addFilter(\n                Criteria.equals('sourceEntity', 'scop_platform_redirecter_redirect'),\n            );\n            criteria.addQuery(Criteria.contains('type', 'import'));\n\n            return criteria;\n        },\n    },\n\n    created() {\n        const criteria = new Criteria(1, 25);\n        criteria.addFilter(\n            Criteria.equals('technicalName', 'default_scop_platform_redirecter_redirect')\n        );\n        this.importExportProfileRepository.search(criteria).then((result) => {\n            if (result[0]) {\n                this.selectedProfileId = result[0].id;\n            }\n        })\n    },\n\n    watch: {\n\n    },\n\n    methods: {\n        async activityLoaded() {\n            const activityGrid = this.$refs.activityGrid;\n            if (activityGrid) {\n                const criteria = activityGrid.activityCriteria;\n                // Check if 'activityCriteria.filters' contains an filter with name 'profile.sourceEntity'\n                const hasFilter = criteria.filters.some(filter => filter.field === 'profile.sourceEntity');\n\n                if (!hasFilter) {\n                    criteria.addFilter(Criteria.equals('profile.sourceEntity', 'scop_platform_redirecter_redirect'));\n                    await activityGrid.fetchActivities();\n                }\n            }\n        },\n        onClose() {\n            if (!this.processing)\n                this.$emit('close');\n        },\n        onFileChange(file) {\n            this.file = file;\n            this.noFile = file == null;\n        },\n        onProfileSelect(profileId) {\n            this.selectedProfileId = profileId;\n        },\n        async startProcess() {\n            if (this.type == 'import') {\n                this.startImport();\n            } else if (this.type == 'export') {\n                this.startExport();\n            }\n        },\n        async startImport() { //Importing the file\n            this.processing = true;\n            const profile = this.selectedProfileId;\n\n            this.importExport.import(profile, this.selectedFile, this.handleProgress).then(() => {\n                this.selectedFile = null;\n            }).catch((error) => {\n                if (!error.response || !error.response.data || !error.response.data.errors) {\n                    this.createNotificationError({\n                        message: error.message,\n                    });\n                } else {\n                    error.response.data.errors.forEach((singleError) => {\n                        this.createNotificationError({\n                            message: `${singleError.code}: ${singleError.detail}`,\n                        });\n                    });\n                }\n\n                this.processing = false;\n            });\n        },\n        async startExport() {\n            this.processing = true;\n\n            this.importExport.export(this.selectedProfileId, this.handleProgress, this.config).catch((error) => {\n                if (!error.response || !error.response.data || !error.response.data.errors) {\n                    this.createNotificationError({\n                        message: error.message,\n                    });\n                } else {\n                    error.response.data.errors.forEach((singleError) => {\n                        this.createNotificationError({\n                            message: `${singleError.code}: ${singleError.detail}`,\n                        });\n                    });\n                }\n\n                this.processing = false;\n            });\n        },\n        handleProgress(log) {\n            if (log.activity === 'export') {\n                this.createNotificationInfo({\n                    message: this.$tc('sw-import-export.exporter.messageExportStarted'),\n                });\n\n                this.$emit('export-started', log);\n            } else if (log.activity === 'import') {\n                this.createNotificationInfo({\n                    message: this.$tc('sw-import-export.importer.messageImportStarted'),\n                });\n\n                this.$emit('import-started', log);\n            }\n\n            this.$refs.activityGrid.addActivity(log);\n            this.$refs.activityGrid.fetchActivities();\n            this.$emit('updateList'); //Updating the List\n            this.processing = false;\n        },\n    }\n\n});\n","const Criteria = Shopware.Data.Criteria;\nconst {Component} = Shopware;\n\nComponent.extend('scop-platform-redirect-import-export-activity', 'sw-import-export-activity', {\n    computed: {\n        activityCriteria() {\n            const criteria = new Shopware.Data.Criteria();\n\n            if (this.type === 'import') {\n                criteria.addFilter(Criteria.multi(\n                    'OR',\n                    [\n                        Criteria.equals('activity', 'import'),\n                        Criteria.equals('activity', 'dryrun'),\n                    ],\n                ));\n            } else if (this.type === 'export') {\n                criteria.addFilter(Criteria.equals('activity', 'export'));\n            }\n            criteria.addFilter(Criteria.equals('profile.sourceEntity', 'scop_platform_redirecter_redirect'));\n            criteria.addSorting(Criteria.sort('createdAt', 'DESC'));\n\n            criteria.setPage(1);\n            criteria.addAssociation('user');\n            criteria.addAssociation('file');\n            criteria.addAssociation('profile');\n            criteria.getAssociation('invalidRecordsLog')\n                .addAssociation('file');\n\n            return criteria;\n        }\n    }\n})\n","import './page/scop-platform-redirect-list';\nimport './page/scop-platform-redirect-details';\nimport './page/scop-platform-redirect-create';\nimport './page/scop-platform-redirect-import-export-modal';\nimport './page/scop-platform-redirect-import-export-activity';\nimport deDE from './snippet/de-DE.json';\nimport enGB from './snippet/en-GB.json';\nvar inAppPurchaseId = 'my-iap-identifier';\nShopware.Module.register('scop-platform-redirect', {\n        entity: 'scop_platform_redirecter_redirect',\n        type: 'plugin',\n        name: 'scop-platform-redirect',\n        title: 'scopplatformredirecter.general.title',\n        description: 'scopplatformredirecter.general.title',\n        color: '#019994',\n        icon: 'regular-double-chevron-right-s',\n        defaultSearchConfiguration: {\n            _searchable: true,\n            sourceURL: {\n                _searchable: true,\n                _score: 500,\n            },\n            targetURL: {\n                name: {\n                    _searchable: true,\n                    _score: 500,\n                },\n            },\n        },\n        computed: {\n            inAppPurchaseCheckout() {\n                return Shopware.Store.get('inAppPurchaseCheckout');\n            },\n\n            hideButton() {\n                return Shopware.InAppPurchase.isActive('ScopPlatformRedirecter', inAppPurchaseId);\n            }\n        },\n\n        methods: {\n            onClick() {\n                this.inAppPurchaseCheckout.request({ identifier: inAppPurchaseId }, 'ScopPlatformRedirecter');\n            }\n        },\n        routes: {\n            list: {\n                component: 'scop-platform-redirect-list',\n                path: 'list'\n            },\n            details: {\n                component: 'scop-platform-redirect-details',\n                path: 'details/:id',\n                meta: {\n                    parentPath: 'scop.platform.redirect.list'\n                }\n            },\n            create: {\n                component: 'scop-platform-redirect-create',\n                path: 'create',\n                meta: {\n                    parentPath: 'scop.platform.redirect.list'\n                }\n            },\n        },\n        settingsItem: {\n            group: 'content',\n            to: 'scop.platform.redirect.list',\n            icon: 'regular-double-chevron-right-s',\n            privilege: 'system.system_config',\n        },\n        snippets: {\n            'de-DE': deDE,\n            'en-GB': enGB\n        }\n    }\n);\n\nconst { Application } = Shopware;\n\n// Disable search if no in app purchase active\nif (Shopware.InAppPurchase.isActive('ScopPlatformRedirecter', inAppPurchaseId)) {\n    Application.addServiceProviderDecorator('searchTypeService', searchTypeService => {\n        searchTypeService.upsertType('scop_platform_redirecter_redirect', {\n            entityName: 'scop_platform_redirecter_redirect',\n            placeholderSnippet: 'scopplatformredirecter.general.searchAllRedirects',\n            hideOnGlobalSearchBar: false\n        });\n\n        return searchTypeService;\n    });\n}\n\nShopware.Component.override('sw-search-bar-item', () => import('../../app/component/structure/sw-search-bar-item'));\n\n","const { Component } = Shopware;\n\nComponent.override('sw-import-export-edit-profile-general', {\n    computed: {\n        supportedEntities() {\n            const supportedEntities = this.$super('supportedEntities');\n            supportedEntities.push({\n                value: 'scop_platform_redirecter_redirect',\n                label: this.$tc('scopplatformredirecter.general.title'),\n                type: 'import-export',\n            });\n\n            return supportedEntities;\n        }\n    }\n});"],"file":"assets/scop-platform-redirecter-DGmBu5gW.js"}